[tool.poetry]
name = "groupchat"
version = "0.1.0"
description = "Agent-powered network intelligence system with micropayments"
authors = ["Brian Ellis <your.email@example.com>"]
readme = "README.md"
packages = [{include = "groupchat"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.115.0"
uvicorn = {extras = ["standard"], version = "^0.32.0"}
pydantic = "^2.9.0"
pydantic-settings = "^2.5.0"
sqlalchemy = "^2.0.35"
alembic = "^1.13.3"
asyncpg = "^0.30.0"
pgvector = "^0.3.5"
python-dotenv = "^1.0.1"
httpx = "^0.27.2"
twilio = "^9.3.0"
openai = "^1.51.0"
langchain = "^0.3.0"
langgraph = "^0.2.0"
redis = "^5.1.0"
stripe = "^11.0.0"
python-multipart = "^0.0.12"
email-validator = "^2.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.0"
pytest-asyncio = "^0.24.0"
pytest-cov = "^5.0.0"
black = "^24.8.0"
ruff = "^0.6.0"
mypy = "^1.11.0"
ipython = "^8.27.0"
rich = "^13.8.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --tb=short"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests for individual functions",
    "integration: Integration tests for API endpoints",
    "e2e: End-to-end workflow tests",
    "slow: Tests that take longer to run",
    "external: Tests requiring external services"
]

[tool.coverage.run]
source = ["groupchat"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]