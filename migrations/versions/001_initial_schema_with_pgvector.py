"""Initial database schema with pgvector support

Revision ID: 001_initial_schema
Revises: 
Create Date: 2025-09-05 00:18:32.922185

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy

# revision identifiers, used by Alembic.
revision: str = "001_initial_schema"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Enable pgvector extension
    op.execute("CREATE EXTENSION IF NOT EXISTS vector")
    
    op.create_table(
        "contacts",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("phone_number", sa.String(length=20), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=True),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("bio", sa.Text(), nullable=True),
        sa.Column(
            "expertise_embedding",
            pgvector.sqlalchemy.vector.VECTOR(dim=1536),
            nullable=True,
        ),
        sa.Column("expertise_summary", sa.Text(), nullable=True),
        sa.Column("trust_score", sa.Float(), nullable=False),
        sa.Column("response_rate", sa.Float(), nullable=False),
        sa.Column("avg_response_time_minutes", sa.Float(), nullable=True),
        sa.Column("total_contributions", sa.Integer(), nullable=False),
        sa.Column("total_earnings_cents", sa.Integer(), nullable=False),
        sa.Column("is_available", sa.Boolean(), nullable=False),
        sa.Column("max_queries_per_day", sa.Integer(), nullable=False),
        sa.Column("preferred_contact_method", sa.String(length=20), nullable=False),
        sa.Column(
            "status",
            sa.Enum("ACTIVE", "INACTIVE", "PENDING", "SUSPENDED", name="contactstatus"),
            nullable=False,
        ),
        sa.Column(
            "extra_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("phone_number"),
    )
    op.create_index(
        "idx_contact_availability", "contacts", ["is_available", "status"], unique=False
    )
    op.create_index("idx_contact_email", "contacts", ["email"], unique=False)
    op.create_index("idx_contact_phone", "contacts", ["phone_number"], unique=False)
    op.create_index("idx_contact_status", "contacts", ["status"], unique=False)
    op.create_index(
        "idx_contact_trust_score", "contacts", ["trust_score"], unique=False
    )
    op.create_table(
        "expertise_tags",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("category", sa.String(length=100), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index("idx_tag_category", "expertise_tags", ["category"], unique=False)
    op.create_index("idx_tag_name", "expertise_tags", ["name"], unique=False)
    op.create_table(
        "queries",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_phone", sa.String(length=20), nullable=False),
        sa.Column("question_text", sa.Text(), nullable=False),
        sa.Column(
            "question_embedding",
            pgvector.sqlalchemy.vector.VECTOR(dim=1536),
            nullable=True,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "PENDING",
                "ROUTING",
                "COLLECTING",
                "COMPILING",
                "COMPLETED",
                "FAILED",
                "CANCELLED",
                name="querystatus",
            ),
            nullable=False,
        ),
        sa.Column("max_experts", sa.Integer(), nullable=False),
        sa.Column("min_experts", sa.Integer(), nullable=False),
        sa.Column("timeout_minutes", sa.Integer(), nullable=False),
        sa.Column("total_cost_cents", sa.Integer(), nullable=False),
        sa.Column("platform_fee_cents", sa.Integer(), nullable=False),
        sa.Column("context", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_query_created", "queries", ["created_at"], unique=False)
    op.create_index("idx_query_status", "queries", ["status"], unique=False)
    op.create_index("idx_query_user", "queries", ["user_phone"], unique=False)
    op.create_table(
        "api_credentials",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("contact_id", sa.UUID(), nullable=False),
        sa.Column("service_name", sa.String(length=100), nullable=False),
        sa.Column("credential_type", sa.String(length=50), nullable=False),
        sa.Column("encrypted_value", sa.Text(), nullable=False),
        sa.Column("encryption_method", sa.String(length=50), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("last_validated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "extra_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["contact_id"], ["contacts.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("contact_id", "service_name", name="uq_contact_service"),
    )
    op.create_index(
        "idx_credential_contact", "api_credentials", ["contact_id"], unique=False
    )
    op.create_index(
        "idx_credential_service", "api_credentials", ["service_name"], unique=False
    )
    op.create_table(
        "compiled_answers",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("query_id", sa.UUID(), nullable=False),
        sa.Column("final_answer", sa.Text(), nullable=False),
        sa.Column("summary", sa.Text(), nullable=True),
        sa.Column("confidence_score", sa.Float(), nullable=False),
        sa.Column("compilation_method", sa.String(length=50), nullable=False),
        sa.Column("compilation_prompt", sa.Text(), nullable=True),
        sa.Column("compilation_tokens_used", sa.Integer(), nullable=False),
        sa.Column("quality_score", sa.Float(), nullable=True),
        sa.Column("user_rating", sa.Integer(), nullable=True),
        sa.Column("user_feedback", sa.Text(), nullable=True),
        sa.Column(
            "extra_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "user_rating >= 1 AND user_rating <= 5", name="check_user_rating"
        ),
        sa.ForeignKeyConstraint(["query_id"], ["queries.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("query_id"),
    )
    op.create_index(
        "idx_compiled_query", "compiled_answers", ["query_id"], unique=False
    )
    op.create_table(
        "contact_expertise",
        sa.Column("contact_id", sa.UUID(), nullable=False),
        sa.Column("tag_id", sa.UUID(), nullable=False),
        sa.Column("confidence_score", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(["contact_id"], ["contacts.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["tag_id"], ["expertise_tags.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("contact_id", "tag_id"),
    )
    op.create_index(
        "idx_contact_expertise_contact",
        "contact_expertise",
        ["contact_id"],
        unique=False,
    )
    op.create_index(
        "idx_contact_expertise_tag", "contact_expertise", ["tag_id"], unique=False
    )
    op.create_table(
        "contributions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("query_id", sa.UUID(), nullable=False),
        sa.Column("contact_id", sa.UUID(), nullable=True),
        sa.Column("response_text", sa.Text(), nullable=False),
        sa.Column("confidence_score", sa.Float(), nullable=False),
        sa.Column("relevance_score", sa.Float(), nullable=True),
        sa.Column("requested_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("responded_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("response_time_minutes", sa.Float(), nullable=True),
        sa.Column("was_used", sa.Boolean(), nullable=False),
        sa.Column("quality_rating", sa.Float(), nullable=True),
        sa.Column("payout_amount_cents", sa.Integer(), nullable=False),
        sa.Column(
            "extra_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["contact_id"], ["contacts.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["query_id"], ["queries.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("query_id", "contact_id", name="uq_query_contact"),
    )
    op.create_index(
        "idx_contribution_contact", "contributions", ["contact_id"], unique=False
    )
    op.create_index(
        "idx_contribution_query", "contributions", ["query_id"], unique=False
    )
    op.create_index(
        "idx_contribution_timing",
        "contributions",
        ["requested_at", "responded_at"],
        unique=False,
    )
    op.create_table(
        "ledger",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("transaction_id", sa.UUID(), nullable=False),
        sa.Column(
            "transaction_type",
            sa.Enum(
                "QUERY_PAYMENT",
                "CONTRIBUTION_PAYOUT",
                "PLATFORM_FEE",
                "REFERRAL_BONUS",
                "REFUND",
                "ADJUSTMENT",
                name="transactiontype",
            ),
            nullable=False,
        ),
        sa.Column("account_type", sa.String(length=50), nullable=False),
        sa.Column("account_id", sa.String(length=100), nullable=False),
        sa.Column(
            "entry_type",
            sa.Enum("DEBIT", "CREDIT", name="ledgerentrytype"),
            nullable=False,
        ),
        sa.Column("amount_cents", sa.Integer(), nullable=False),
        sa.Column("currency", sa.String(length=3), nullable=False),
        sa.Column("query_id", sa.UUID(), nullable=True),
        sa.Column("contact_id", sa.UUID(), nullable=True),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column(
            "extra_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("balance_after_cents", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["contact_id"], ["contacts.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["query_id"], ["queries.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_ledger_account", "ledger", ["account_type", "account_id"], unique=False
    )
    op.create_index("idx_ledger_contact", "ledger", ["contact_id"], unique=False)
    op.create_index("idx_ledger_created", "ledger", ["created_at"], unique=False)
    op.create_index("idx_ledger_query", "ledger", ["query_id"], unique=False)
    op.create_index(
        "idx_ledger_transaction", "ledger", ["transaction_id"], unique=False
    )
    op.create_index("idx_ledger_type", "ledger", ["transaction_type"], unique=False)
    op.create_index(
        op.f("ix_ledger_transaction_id"), "ledger", ["transaction_id"], unique=False
    )
    op.create_table(
        "payout_splits",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("query_id", sa.UUID(), nullable=False),
        sa.Column("total_amount_cents", sa.Integer(), nullable=False),
        sa.Column("contributor_pool_cents", sa.Integer(), nullable=False),
        sa.Column("platform_fee_cents", sa.Integer(), nullable=False),
        sa.Column("referral_bonus_cents", sa.Integer(), nullable=False),
        sa.Column(
            "distribution", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("is_processed", sa.Boolean(), nullable=False),
        sa.Column("processed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "stripe_transfer_ids",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
        ),
        sa.Column(
            "extra_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["query_id"], ["queries.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("query_id", name="uq_payout_query"),
    )
    op.create_index(
        "idx_payout_processed", "payout_splits", ["is_processed"], unique=False
    )
    op.create_index("idx_payout_query", "payout_splits", ["query_id"], unique=False)
    op.create_table(
        "referrals",
        sa.Column("referrer_id", sa.UUID(), nullable=False),
        sa.Column("referred_id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["referred_id"], ["contacts.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["referrer_id"], ["contacts.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("referrer_id", "referred_id"),
    )
    op.create_index("idx_referral_referred", "referrals", ["referred_id"], unique=False)
    op.create_index("idx_referral_referrer", "referrals", ["referrer_id"], unique=False)
    op.create_table(
        "citations",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("compiled_answer_id", sa.UUID(), nullable=False),
        sa.Column("contribution_id", sa.UUID(), nullable=False),
        sa.Column("claim_text", sa.Text(), nullable=False),
        sa.Column("source_excerpt", sa.Text(), nullable=False),
        sa.Column("position_in_answer", sa.Integer(), nullable=False),
        sa.Column("confidence", sa.Float(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["compiled_answer_id"], ["compiled_answers.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["contribution_id"], ["contributions.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_citation_answer", "citations", ["compiled_answer_id"], unique=False
    )
    op.create_index(
        "idx_citation_contribution", "citations", ["contribution_id"], unique=False
    )
    op.create_index(
        "idx_citation_position", "citations", ["position_in_answer"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_citation_position", table_name="citations")
    op.drop_index("idx_citation_contribution", table_name="citations")
    op.drop_index("idx_citation_answer", table_name="citations")
    op.drop_table("citations")
    op.drop_index("idx_referral_referrer", table_name="referrals")
    op.drop_index("idx_referral_referred", table_name="referrals")
    op.drop_table("referrals")
    op.drop_index("idx_payout_query", table_name="payout_splits")
    op.drop_index("idx_payout_processed", table_name="payout_splits")
    op.drop_table("payout_splits")
    op.drop_index(op.f("ix_ledger_transaction_id"), table_name="ledger")
    op.drop_index("idx_ledger_type", table_name="ledger")
    op.drop_index("idx_ledger_transaction", table_name="ledger")
    op.drop_index("idx_ledger_query", table_name="ledger")
    op.drop_index("idx_ledger_created", table_name="ledger")
    op.drop_index("idx_ledger_contact", table_name="ledger")
    op.drop_index("idx_ledger_account", table_name="ledger")
    op.drop_table("ledger")
    op.drop_index("idx_contribution_timing", table_name="contributions")
    op.drop_index("idx_contribution_query", table_name="contributions")
    op.drop_index("idx_contribution_contact", table_name="contributions")
    op.drop_table("contributions")
    op.drop_index("idx_contact_expertise_tag", table_name="contact_expertise")
    op.drop_index("idx_contact_expertise_contact", table_name="contact_expertise")
    op.drop_table("contact_expertise")
    op.drop_index("idx_compiled_query", table_name="compiled_answers")
    op.drop_table("compiled_answers")
    op.drop_index("idx_credential_service", table_name="api_credentials")
    op.drop_index("idx_credential_contact", table_name="api_credentials")
    op.drop_table("api_credentials")
    op.drop_index("idx_query_user", table_name="queries")
    op.drop_index("idx_query_status", table_name="queries")
    op.drop_index("idx_query_created", table_name="queries")
    op.drop_table("queries")
    op.drop_index("idx_tag_name", table_name="expertise_tags")
    op.drop_index("idx_tag_category", table_name="expertise_tags")
    op.drop_table("expertise_tags")
    op.drop_index("idx_contact_trust_score", table_name="contacts")
    op.drop_index("idx_contact_status", table_name="contacts")
    op.drop_index("idx_contact_phone", table_name="contacts")
    op.drop_index("idx_contact_email", table_name="contacts")
    op.drop_index("idx_contact_availability", table_name="contacts")
    op.drop_table("contacts")
    # Drop ENUMs
    op.execute("DROP TYPE IF EXISTS contactstatus")
    op.execute("DROP TYPE IF EXISTS querystatus")
    op.execute("DROP TYPE IF EXISTS ledgerentrytype")
    op.execute("DROP TYPE IF EXISTS transactiontype")
    # Drop pgvector extension
    op.execute("DROP EXTENSION IF EXISTS vector")
    # ### end Alembic commands ###
